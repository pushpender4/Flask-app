name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Unit Tests
      run: |
        python -m pytest --maxfail=1 --disable-warnings -q

    - name: Set up image tag
      id: vars
      run: |
        SHA=${{ github.sha }}
        BRANCH=${{ github.ref_name }}
        IMAGE_TAG="$BRANCH-${SHA::7}"
        echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build Docker Image
      run: docker build -t flask-cicd-app .

    - name: Docker Login
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Tag previous image (if exists)
      run: |
        docker pull pushpender123/flask-cicd-app:latest || true
        docker tag pushpender123/flask-cicd-app:latest pushpender123/flask-cicd-app:previous
        docker push pushpender123/flask-cicd-app:previous

    - name: Push Docker Image
      run: |
        docker tag flask-cicd-app pushpender123/flask-cicd-app:${{ steps.vars.outputs.tag }}
        docker tag flask-cicd-app pushpender123/flask-cicd-app:latest
        docker push pushpender123/flask-cicd-app:${{ steps.vars.outputs.tag }}
        docker push pushpender123/flask-cicd-app:latest

  cd:
    needs: ci
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_KEY }}
        script: |
          /home/ubuntu/deploy_flask.sh

          # Kill any process using port 5000 
          sudo fuser -k 5000/tcp || true

          # Stop and remove existing container with same name
          CONTAINER_ID=$(docker ps -aq --filter "name=^flask-cicd-app$")
          if [ -n "$CONTAINER_ID" ]; then
            docker stop $CONTAINER_ID || true
            docker rm $CONTAINER_ID || true
          fi

          # Pull and run the latest image
          docker pull pushpender123/flask-cicd-app:latest
          docker run -d -p 5000:5000 --name flask-cicd-app pushpender123/flask-cicd-app:latest